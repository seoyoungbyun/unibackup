/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-11-21 15:18:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;

public final class practice29_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
 request.setCharacterEncoding("UTF-8"); 
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	String[] typeNames = {"전공필수","전공선택","교양","자유선택"};
	String[] titleNames = {"웹프로그래밍","운영체제","소프트웨어프로그래밍","데이터베이스개론","자료구조","네트워크","창의와감성","사회봉사"};
	String[] days = {"월","화","수","목","금"};
	
	String sType = request.getParameter("lectureType");
	String sTitle = request.getParameter("lectureTitle");
	String sday = request.getParameter("day");
	String stime = request.getParameter("time");
	String sconsecutive = request.getParameter("consecutive");
	
	if (sType != null && sTitle != null && sday != null && stime != null && sconsecutive != null){
		int type = Integer.parseInt(sType);
		int title = Integer.parseInt(sTitle);
		int day = Integer.parseInt(sday);
		
		String s = typeNames[type] + "/" + titleNames[title] + "/" + days[day] + "/" + stime + "/" + sconsecutive;
		ArrayList<String> sadd = (ArrayList<String>)session.getAttribute("timetable");
		if (sadd == null){
			sadd = new ArrayList<String>();
		}
		sadd.add(s);
		session.setAttribute("timetable", sadd);
	}

      out.write("\r\n");
      out.write("	<form action=\"practice29.jsp\">\r\n");
      out.write("		과목타입 : <select name=lectureType>\r\n");
      out.write("		<option value=0>전공필수</option>\r\n");
      out.write("		<option value=1>전공선택</option>\r\n");
      out.write("		<option value=2>교양</option>\r\n");
      out.write("		<option value=3>자유선택</option>\r\n");
      out.write("		</select>\r\n");
      out.write("		과목명 : <select name=lectureTitle>\r\n");
      out.write("		<option value=0>웹프로그래밍</option>\r\n");
      out.write("		<option value=1>운영체제</option>\r\n");
      out.write("		<option value=2>소프트웨어프로그래밍</option>\r\n");
      out.write("		<option value=3>데이터베이스개론</option>\r\n");
      out.write("		<option value=4>자료구조</option>\r\n");
      out.write("		<option value=5>네트워크</option>\r\n");
      out.write("		<option value=6>창의와감성</option>\r\n");
      out.write("		<option value=7>사회봉사</option>\r\n");
      out.write("		</select>\r\n");
      out.write("		요일 : <select name=day>\r\n");
      out.write("		<option value=0>월</option>\r\n");
      out.write("		<option value=1>화</option>\r\n");
      out.write("		<option value=2>수</option>\r\n");
      out.write("		<option value=3>목</option>\r\n");
      out.write("		<option value=4>금</option> \r\n");
      out.write("		</select>\r\n");
      out.write("		시간 : <select name=time>\r\n");
      out.write("		<option value=1>1</option>\r\n");
      out.write("		<option value=2>2</option>\r\n");
      out.write("		<option value=3>3</option>\r\n");
      out.write("		<option value=4>4</option>\r\n");
      out.write("		<option value=5>5</option>\r\n");
      out.write("		<option value=6>6</option>\r\n");
      out.write("		</select>\r\n");
      out.write("		연강여부 : <select name=consecutive>\r\n");
      out.write("		<option value=1>1</option>\r\n");
      out.write("		<option value=2>2</option>\r\n");
      out.write("		<option value=3>3</option>\r\n");
      out.write("		<option value=4>4</option>\r\n");
      out.write("		<option value=5>5</option>\r\n");
      out.write("		<option value=6>6</option>\r\n");
      out.write("		</select>\r\n");
      out.write("		&nbsp;&nbsp;\r\n");
      out.write("		<input type=submit value=\"등록\">\r\n");
      out.write("		<hr>\r\n");
      out.write("	</form>\r\n");

	ArrayList<String> list = (ArrayList<String>)session.getAttribute("timetable");
	if (list != null){
		out.println("<div align=center>");
		for (int i = 0; i < list.size(); i++){
			out.println(list.get(i) + "<br>");
		}
		out.println("</div>");
	}

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
